#!/usr/bin/python


#{
  #"name": "3024 Day",
  #"black": "#090300",
  #"red": "#db2d20",
  #"green": "#01a252",
  #"yellow": "#fded02",
 # "blue": "#01a0e4",
  #"purple": "#a16a94",
  #"cyan": "#b5e4f4",
  #"white": "#a5a2a2",
  #"brightBlack": "#5c5855",
  #"brightRed": "#e8bbd0",
  #"brightGreen": "#3a3432",
  #"brightYellow": "#4a4543",
  #"brightBlue": "#807d7c",
  #"brightPurple": "#d6d5d4",
  #"brightCyan": "#cdab53",
  #"brightWhite": "#f7f7f7",
  #"background": "#f7f7f7",
  #"foreground": "#4a4543",
  #"selectionBackground": "#a5a2a2",
 # "cursorColor": "#4a4543"
#}

#https://jonasjacek.github.io/colors/
bytecolor = [
(0,0,0),
(128,0,0),
(0,128,0),
(128,128,0),
(0,0,128),
(128,0,128),
(0,128,128),
(192,192,192),
(128,128,128),
(255,0,0),
(0,255,0),
(255,255,0),
(0,0,255),
(255,0,255),
(0,255,255),
(255,255,255),	
(0,0,0),
(0,0,95),
(0,0,135),
(0,0,175),
(0,0,215),
(0,0,255),
(0,95,0),
(0,95,95),
(0,95,135),
(0,95,175),
(0,95,215),
(0,95,255),
(0,135,0),
(0,135,95),
(0,135,135),
(0,135,175),
(0,135,215),
(0,135,255),
(0,175,0),
(0,175,95),
(0,175,135),
(0,175,175),
(0,175,215),
(0,175,255),
(0,175,255),
(0,175,255),
(0,215,135),
(0,215,135),
(0,215,215),
(0,215,255),
(0,255,0),
(0,255,95),
(0,255,135),
(0,255,175),
(0,255,215),
(0,255,255),
(95,0,0),
(95,0,95),
(95,0,135),
(95,0,175),
(95,0,215),
(95,0,255),
(95,95,0),
(95,95,95),
(95,95,135)	,
(95,95,175),
(95,95,215),
(95,95,255),
(95,135,0),
(95,135,95),
(95,135,135),	
(95,135,175),
(95,135,215),
(95,135,255),
(95,175,0),
(95,175,95),
(95,175,135),
(95,175,175),
(95,175,215),
(95,175,255),
(95,215,0),
(95,215,95),
(95,215,135),
(95,215,175),
(95,215,215),
(95,215,255),
(95,255,0),
(95,255,95),
(95,255,135),
(95,255,175),
(95,255,215),
(95,255,255)	,
(135,0,0),
(135,0,95),
(135,0,135),
(135,0,175),
(135,0,215)	,
(135,0,255),
(135,95,0),
(135,95,95),
(135,95,135),
(135,95,175),
(135,95,215),
(135,95,255),
(135,135,0),
(135,135,95),
(135,135,135),
(135,135,175),
(135,135,215),
(135,135,255),
(135,175,0),
(135,175,95),
(135,175,135),
(135,175,175),
(135,175,215),
(135,175,255),
(135,215,0),
(135,215,95),
(135,215,135),
(135,215,175)	,
(135,215,215),
(135,215,255)	,
(135,255,0),
(135,255,95),
(135,255,135),
(135,255,175),
(135,255,215),
(135,255,255),
(175,0,0),
(175,0,95),
(175,0,135),
(175,0,175)	,
(175,0,215),
(175,0,255)	,
(175,95,0),
(175,95,95),
(175,95,135),
(175,95,175),
(175,95,215),
(175,95,255),
(175,135,0),
(175,135,95),
(175,135,135),
(175,135,175),
(175,135,215),
(175,135,255),
(175,175,0),
(175,175,95),
(175,175,135),
(175,175,175),
(175,175,215),
(175,175,255),
(175,215,0),
(175,215,95),
(175,215,135),
(175,215,175),
(175,215,215),
(175,215,255),
(175,255,0),
(175,255,95),
(175,255,135),
(175,255,175),
(175,255,215)	,
(175,255,255),
(215,0,0)	,
(215,0,95),
(215,0,135)	,
(215,0,175)	,
(215,0,215),
(215,0,255),
(215,95,0),
(215,95,95)	,
(215,95,135),
(215,95,175),
(215,95,215),
(215,95,255),
(215,135,0),
(215,135,95),
(215,135,135),
(215,135,175),
(215,135,215),
(215,135,255)	,
(215,175,0),
(215,175,95),
(215,175,135),
(215,175,175),
(215,175,215),
(215,175,255)	,
(215,215,0),
(215,215,95),
(215,215,135),
(215,215,175)	,
(215,215,215),
(215,215,255),
(215,255,0)	,
(215,255,95),
(215,255,135)	,
(215,255,175),
(215,255,215),
(215,255,255)	,
(255,0,0)	,
(255,0,95),
(255,0,135),
(255,0,175),	
(255,0,215),
(255,0,255)	,
(255,95,0),
(255,95,95)	,
(255,95,135),
(255,95,175),
(255,95,215),	
(255,95,255),	
(255,135,0)	,
(255,135,95)	,
(255,135,135)	,
(255,135,175),	
(255,135,215)	,
(255,135,255),	
(255,175,0)	,
(255,175,95),
(255,175,135)	,
(255,175,175),	
(255,175,215),	
(255,175,255)	,
(255,215,0)	,
(255,215,95),	
(255,215,135),
(255,215,175)	,
(255,215,215),	
(255,215,255)	,
(255,255,0),
(255,255,95),
(255,255,135)	,
(255,255,175)	,
(255,255,215)	,
(255,255,255),
(8,8,8)	,
(18,18,18),
(28,28,28),	
(38,38,38),	
(48,48,48),
(58,58,58),
(68,68,68),	
(78,78,78),	
(88,88,88),
(98,98,98),	
(108,108,108),
(118,118,118),	
(128,128,128),
(138,138,138),	
(148,148,148),	
(158,158,158),
(168,168,168),
(178,178,178),
(188,188,188),
(198,198,198),
(208,208,208),
(218,218,218),
(228,228,228),
(238,238,238)
]

def getbytecolor(value):
  color = bytecolor[value]
  return (color[0], color[1], color[2], 255)

def green():
  return (1,162,82)
def black():
  return (9,3,0,255)
def red():
  return (219,45,32,255)
def blue():
  return (1,160,228,255)
def yellow():
  return (253,237,2,255)
def magenta():
  return (255,0,255,255)
def cyan():
  return (181,228,244,255)
def white():
  return (247,247,247,255)
def reset():
  return white()

def getcolor(value):
  if value == 0:
    return black()
  elif value == 1:
    return red()
  elif value == 2:
    return green()
  elif value == 3:
    return yellow()
  elif value == 4:
    return blue()
  elif value == 5 :
    return magenta()
  elif value == 6:
    return cyan()
  else:
    return white()
